package main

import (
	"bytes"
	"fmt"
	mdhtml "github.com/gomarkdown/markdown/html"
	"github.com/pkg/errors"
	"github.com/robloxapi/rbxapi"
	"github.com/robloxapi/rbxapi/rbxapijson"
	"github.com/robloxapi/rbxapidoc"
	"html"
	"html/template"
	"io"
	"io/ioutil"
	"net/url"
	"os"
	"path"
	"path/filepath"
	"sort"
	"strings"
)

type Data struct {
	Settings    Settings
	Manifest    *Manifest
	CurrentYear int
	Metadata    ReflectionMetadata
	Entities    *Entities
	Templates   *template.Template
}

type Patch struct {
	Stale   bool       `json:"-"`
	Prev    *BuildInfo `json:",omitempty"`
	Info    BuildInfo
	Config  string
	Actions []Action
}

// Escape once to escape the file name, then again to escape the URL.
func doubleEscape(s string) string {
	return url.PathEscape(url.PathEscape(s))
}

// FileLink generates a URL, relative to an arbitrary host.
func (data *Data) FileLink(linkType string, args ...string) (s string) {
retry:
	switch strings.ToLower(linkType) {
	case "index":
		s = "index" + FileExt
	case "resource":
		s = path.Join(data.Settings.Output.Resources, path.Join(args...))
	case "docres":
		s = path.Join(data.Settings.Output.DocResources, path.Join(args...))
	case "updates":
		if len(args) > 0 {
			s = path.Join("updates", doubleEscape(args[0])+FileExt)
		} else {
			s = "updates" + FileExt
		}
	case "class":
		s = path.Join(ClassPath, doubleEscape(args[0])+FileExt)
	case "member":
		if len(args) == 1 {
			return (&url.URL{Fragment: MemberAnchorPrefix + args[0]}).String()
		} else if len(args) == 2 {
			s = path.Join(ClassPath, doubleEscape(args[0])+FileExt) +
				(&url.URL{Fragment: MemberAnchorPrefix + args[1]}).String()
		}
	case "enum":
		s = path.Join(EnumPath, doubleEscape(args[0])+FileExt)
	case "enumitem":
		if len(args) == 1 {
			return (&url.URL{Fragment: MemberAnchorPrefix + args[0]}).String()
		} else if len(args) == 2 {
			s = path.Join(EnumPath, doubleEscape(args[0])+FileExt) +
				(&url.URL{Fragment: MemberAnchorPrefix + args[1]}).String()
		}
	case "type":
		switch strings.ToLower(args[0]) {
		case "class", "enum":
			a := make([]string, 2)
			linkType, a[0] = args[0], args[1]
			args = a
			goto retry
		}
		s = path.Join(TypePath, doubleEscape(args[1])+FileExt)
	case "about":
		s = "about" + FileExt
	case "repository":
		return "https://github.com/robloxapi/rbxapiref"
	case "issues":
		return "https://github.com/robloxapi/rbxapiref/issues"
	case "search":
		s = "search.db"
	case "devhub":
		switch linkType = strings.ToLower(args[0]); linkType {
		case "class", "enumitem", "enum":
			return "https://" + path.Join(DevHubURL, linkType, doubleEscape(args[1]))
		case "property", "function", "event", "callback":
			return "https://" + path.Join(DevHubURL, linkType, doubleEscape(args[1]), doubleEscape(args[2]))
		case "type":
			return "https://" + path.Join(DevHubURL, "datatype", doubleEscape(args[1]))
		}
	}
	s = path.Join("/", data.Settings.Output.Sub, s)
	return s
}

// FilePath generates a file path relative to the output root directory. On a
// web server serving static files, the returned path is meant to point to the
// same file as the file pointed to by the URL generated by FileLink.
func (data *Data) FilePath(typ string, args ...string) string {
	return data.PathFromLink(data.FileLink(typ, args...))
}

// AbsFilePath generates an absolute path located in the Output. On a web
// server serving static files, the returned path is meant to point to the
// same file as the file pointed to by the URL generated by FileLink.
func (data *Data) AbsFilePath(typ string, args ...string) string {
	return data.AbsPathFromLink(data.FileLink(typ, args...))
}

// LinkFromPath transforms a path into a link, if possible.
func (data *Data) LinkFromPath(p string) string {
	if l, err := filepath.Rel(data.Settings.Output.Root, p); err == nil {
		return l
	}
	return p
}

// PathFromLink transforms a link into a path, if possible.
func (data *Data) PathFromLink(l string) string {
	l, _ = url.PathUnescape(l)
	return l
}

// AbsPathFromLink transforms a link into an absolute path, if possible.
func (data *Data) AbsPathFromLink(l string) string {
	l, _ = url.PathUnescape(l)
	return data.AbsPath(l)
}

// AbsPath transforms a relative path into an absolute path.
func (data *Data) AbsPath(p string) string {
	if filepath.IsAbs(p) {
		return p
	}
	return filepath.Join(data.Settings.Output.Root, p)
}

const IconSize = 16

var memberIconIndex = map[string]int{
	"Property": 6,
	"Function": 4,
	"Event":    11,
	"Callback": 16,
}

func (data *Data) Icon(v ...interface{}) template.HTML {
	if len(v) == 0 {
		return ""
	}
	var class string
	var title string
	var index int
retry:
	switch value := v[0].(type) {
	case string:
		switch strings.ToLower(value) {
		case "class":
			class = "class-icon"
			title = "Class"
			meta, ok := data.Metadata.Classes[v[1].(string)]
			if !ok {
				goto finish
			}
			index = meta.ExplorerImageIndex
		case "member":
			entity := data.Entities.Members[[2]string{v[1].(string), v[2].(string)}]
			if entity == nil {
				goto finish
			}
			v = []interface{}{entity.Element}
			goto retry
		case "enum":
			class = "enum-icon"
			title = "Enum"
			index = -1
		case "enumitem":
			class = "enum-item-icon"
			title = "EnumItem"
			index = -1
		}
	case *ClassEntity:
		if value.Element == nil {
			goto finish
		}
		v = []interface{}{value.Element}
		goto retry
	case *MemberEntity:
		if value.Element == nil {
			goto finish
		}
		v = []interface{}{value.Element}
		goto retry
	case *EnumEntity:
		if value.Element == nil {
			goto finish
		}
		v = []interface{}{value.Element}
		goto retry
	case *EnumItemEntity:
		if value.Element == nil {
			goto finish
		}
		v = []interface{}{value.Element}
		goto retry
	case *rbxapijson.Class:
		class = "class-icon"
		title = "Class"
		meta, ok := data.Metadata.Classes[value.Name]
		if !ok {
			goto finish
		}
		index = meta.ExplorerImageIndex
	case rbxapi.Member:
		class = "member-icon"
		title = value.GetMemberType()
		index = memberIconIndex[title]
		if len(v) > 1 && v[1].(bool) == false {
			goto finish
		}
		switch v := value.(type) {
		case interface{ GetSecurity() (string, string) }:
			r, w := v.GetSecurity()
			if r == "None" {
				r = ""
			}
			if w == "None" {
				w = ""
			}
			switch {
			case r != "" && w != "":
				title = "Protected " + title
				if r == w {
					title += " (Read/Write: " + r + ")"
				} else {
					title += " (Read: " + r + " / Write: " + w + ")"
				}
				index++
			case r != "":
				title = "Protected " + title + " (Read: " + r + ")"
				index++
			case w != "":
				title = "Protected " + title + " (Write: " + w + ")"
				index++
			default:
			}
		case interface{ GetSecurity() string }:
			s := v.GetSecurity()
			if s != "" && s != "None" {
				title = "Protected " + title + " (" + s + ")"
				index++
			}
		}
	case *rbxapijson.Enum:
		class = "enum-icon"
		title = "Enum"
		index = -1
	case *rbxapijson.EnumItem:
		class = "enum-item-icon"
		title = "EnumItem"
		index = -1
	}
finish:
	var style string
	if index >= 0 {
		style = fmt.Sprintf(` style="--icon-index: %d"`, index)
	}
	const body = `<span class="icon %s" title="%s"%s></span>`
	return template.HTML(fmt.Sprintf(body, template.HTMLEscapeString(class), template.HTMLEscapeString(title), style))
}

func (data *Data) ExecuteTemplate(name string, tdata interface{}) (template.HTML, error) {
	var buf bytes.Buffer
	err := data.Templates.ExecuteTemplate(&buf, name, tdata)
	return template.HTML(buf.String()), err
}

func (data *Data) EmbedResource(resource string) (interface{}, error) {
	b, err := ioutil.ReadFile(filepath.Join(data.Settings.Input.Resources, resource))
	switch filepath.Ext(resource) {
	case ".css":
		return template.CSS(b), err
	case ".js":
		return template.JS(b), err
	case ".html", ".svg":
		return template.HTML(b), err
	}
	return string(b), err
}

func (data *Data) GenerateResourceElements(resources []Resource) (v []interface{}, err error) {
	for _, resource := range resources {
		var ResData struct {
			Type     string
			Resource Resource
			Content  interface{}
		}
		ResData.Type = filepath.Ext(resource.Name)
		ResData.Resource = resource
		if resource.Embed {
			var content []byte
			if resource.Content != nil {
				content = resource.Content
			} else {
				filename := filepath.Join(data.Settings.Input.Resources, resource.Name)
				if content, err = ioutil.ReadFile(filename); err != nil {
					return nil, err
				}
			}
			switch ResData.Type {
			case ".css":
				ResData.Content = template.CSS(content)
			case ".js":
				ResData.Content = template.JS(content)
			case ".html", ".svg":
				ResData.Content = template.HTML(content)
			default:
				ResData.Content = string(content)
			}
		}
		r, err := data.ExecuteTemplate("resource", ResData)
		if err != nil {
			return nil, err
		}
		v = append(v, r)
	}
	return v, nil
}

func generateMetaTag(a, b, c string) template.HTML {
	return template.HTML("<meta " + html.EscapeString(a) + "=\"" + html.EscapeString(b) + "\" content=\"" + html.EscapeString(c) + "\" />")
}

func (data *Data) GenerateCardElements(pages ...*Page) (elements []template.HTML, err error) {
	getField := func(name string) (value string, ok bool) {
		for _, page := range pages {
			if v, k := page.Meta[name]; k {
				value = v
				ok = true
			}
		}
		return value, ok
	}

	elements = append(elements,
		generateMetaTag("property", "og:type", "website"),
		generateMetaTag("name", "twitter:card", "summary"),
	)
	if title, ok := getField("Title"); ok {
		elements = append(elements,
			generateMetaTag("property", "og:title", title),
			generateMetaTag("name", "twitter:title", title),
		)
	}
	if desc, ok := getField("Description"); ok {
		elements = append(elements,
			generateMetaTag("property", "og:description", desc),
			generateMetaTag("name", "twitter:description", desc),
		)
	}
	if image, ok := getField("Image"); ok {
		u := (&url.URL{Scheme: "https", Host: data.Settings.Output.Host, Path: data.FileLink("resource", image)}).String()
		elements = append(elements,
			generateMetaTag("property", "og:image", u),
			generateMetaTag("name", "twitter:image", u),
		)
	}

	return elements, nil
}

func (data *Data) GenerateHistoryElements(entity interface{}, button bool) (template.HTML, error) {
	var patches []Patch
	switch entity := entity.(type) {
	case *ClassEntity:
		patches = MergePatches(entity.Patches, nil, nil)
		for _, member := range entity.MemberList {
			patches = MergePatches(patches, member.Patches, func(action *Action) bool {
				// Filter actions where the parent entity is the cause.
				return action.GetMember() != nil
			})
		}
		sort.Slice(patches, func(i, j int) bool {
			return patches[i].Info.Date.After(patches[j].Info.Date)
		})
	case *MemberEntity:
		patches = entity.Patches
	case *EnumEntity:
		patches = MergePatches(entity.Patches, nil, nil)
		for _, item := range entity.ItemList {
			patches = MergePatches(patches, item.Patches, func(action *Action) bool {
				return action.GetEnumItem() != nil
			})
		}
		sort.Slice(patches, func(i, j int) bool {
			return patches[i].Info.Date.After(patches[j].Info.Date)
		})
	case *EnumItemEntity:
		patches = entity.Patches
	default:
		return "", nil
	}
	if len(patches) == 0 {
		return "", nil
	}
	if len(patches) == 1 && data.Manifest.Patches[0].Info.Equal(patches[0].Info) {
		return "", nil
	}
	return data.ExecuteTemplate("history", struct {
		First   BuildInfo
		Patches []Patch
		Button  bool
	}{data.Manifest.Patches[0].Info, patches, button})
}

func (data *Data) GeneratePages(generators []PageGenerator) (pages []Page) {
	for _, generator := range generators {
		pages = append(pages, generator(data)...)
	}
	return pages
}

func (data *Data) RenderPageDirs(pages []Page) error {
	dirs := map[string]struct{}{}
	for _, page := range pages {
		dir := filepath.Join(data.Settings.Output.Root, filepath.Dir(page.File))
		if _, ok := dirs[dir]; ok {
			continue
		}
		if err := os.MkdirAll(dir, 0755); err != nil {
			return errors.WithMessage(err, "make directory")
		}
		dirs[dir] = struct{}{}
	}
	return nil
}

func (data *Data) RenderResources(pages []Page) (err error) {
	dirs := map[string]struct{}{}
	resources := map[string]*Resource{}
	addResource := func(resource *Resource) {
		if resource.Name == "" || resource.Embed {
			return
		}
		if r, ok := resources[resource.Name]; ok {
			if r.Content != nil {
				err = errors.Errorf("multiple definitions of resource %s", resource.Name)
				return
			}
		}
		resources[resource.Name] = resource
	}
	for _, page := range pages {
		for i := range page.Styles {
			if addResource(&page.Styles[i]); err != nil {
				return err
			}
		}
		for i := range page.Scripts {
			if addResource(&page.Scripts[i]); err != nil {
				return err
			}
		}
		for i := range page.Resources {
			if addResource(&page.Resources[i]); err != nil {
				return err
			}
		}
	}
	for name, resource := range resources {
		var src io.ReadCloser
		if resource.Content != nil {
			src = ioutil.NopCloser(bytes.NewReader(resource.Content))
		} else {
			var err error
			if src, err = os.Open(filepath.Join(data.Settings.Input.Resources, name)); err != nil {
				return errors.WithMessage(err, "open resource")
			}
		}
		dstname := data.AbsFilePath("resource", name)
		dir := filepath.Dir(dstname)
		if _, ok := dirs[dir]; !ok {
			if err := os.MkdirAll(dir, 0755); err != nil {
				return errors.WithMessage(err, "make directory")
			}
			dirs[dir] = struct{}{}
		}
		dst, err := os.Create(dstname)
		if err != nil {
			src.Close()
			if err != nil {
				return errors.WithMessage(err, "create resource")
			}
		}
		_, err = io.Copy(dst, src)
		dst.Close()
		src.Close()
		if err != nil {
			return errors.WithMessage(err, "write resource")
		}
	}
	return nil
}

func (data *Data) RenderPages(pages []Page) error {
	var rootData struct {
		Data     *Data
		MainPage *Page
		Page     *Page
	}
	rootData.Data = data
	// Treat first page with unspecified filename as main page.
	for _, page := range pages {
		if page.File == "" {
			rootData.MainPage = &page
			break
		}
	}
	if rootData.MainPage == nil {
		return errors.New("no main template")
	}
	for _, page := range pages {
		if page.File == "" {
			continue
		}
		file, err := os.Create(filepath.Join(data.Settings.Output.Root, page.File))
		if err != nil {
			return errors.WithMessage(err, "create file")
		}
		if page.Data == nil {
			page.Data = data
		}
		rootData.Page = &page
		err = data.Templates.ExecuteTemplate(file, rootData.MainPage.Template, rootData)
		file.Close()
		if err != nil {
			return errors.WithMessage(err, "generate page")
		}
	}
	return nil
}

func (data *Data) LatestPatch() Patch {
	return data.Manifest.Patches[len(data.Manifest.Patches)-1]
}

func (data *Data) NormalizeDocReference(link string) string {
	colon := strings.IndexByte(link, ':')
	if colon < 0 {
		return link
	}

	switch scheme, path := link[:colon], link[colon+1:]; scheme {
	case "res":
		return data.FileLink("docres", filepath.Join(data.Settings.Input.DocResources, path))
	case "class":
		slash := strings.IndexByte(link, '/')
		if slash < 0 {
			return data.FileLink("class", path)
		}
		return data.FileLink("member", path[:slash], path[slash+1:])
	case "enum":
		slash := strings.IndexByte(link, '/')
		if slash < 0 {
			return data.FileLink("enum", path)
		}
		return data.FileLink("enumitem", path[:slash], path[slash+1:])
	case "type":
		slash := strings.IndexByte(link, '/')
		if slash < 0 {
			if typ, ok := data.Entities.Types[path[slash+1:]]; ok {
				return data.FileLink("type", typ.Element.Category, typ.ID)
			}
		}
		return data.FileLink("type", path[:slash], path[slash+1:])
	case "member":
		return data.FileLink("member", path)
	}
	return link
}

func (data *Data) GenerateDocuments() {
	if data.Settings.Input.Documents == "" {
		return
	}

	renderer := mdhtml.NewRenderer(mdhtml.RendererOptions{})
	dummy := dummyDocument{}
	dir := rbxapidoc.NewDirectorySection(
		data.Settings.Input.Documents,
		rbxapidoc.MarkdownFileHandler,
	)

	for _, entity := range data.Entities.ClassList {
		if entity.Document, _ = dir.Query("class", entity.ID).(Document); entity.Document != nil {
			entity.Document.SetRender(renderer)
			if doc, ok := entity.Document.(rbxapidoc.Linkable); ok {
				doc.SetLinks(data.NormalizeDocReference)
			}
			for _, member := range entity.MemberList {
				if member.Document, _ = entity.Document.Query("Members", member.ID[1]).(Document); member.Document != nil {
					member.Document.SetRender(renderer)
				} else {
					member.Document = dummy
				}
			}
		} else {
			entity.Document = dummy
		}
	}
	for _, entity := range data.Entities.EnumList {
		if entity.Document, _ = dir.Query("enum", entity.ID).(Document); entity.Document != nil {
			entity.Document.SetRender(renderer)
			if doc, ok := entity.Document.(rbxapidoc.Linkable); ok {
				doc.SetLinks(data.NormalizeDocReference)
			}
			for _, item := range entity.ItemList {
				if item.Document, _ = entity.Document.Query("Members", item.ID[1]).(Document); item.Document != nil {
					item.Document.SetRender(renderer)
				} else {
					item.Document = dummy
				}
			}
		} else {
			entity.Document = dummy
		}
	}
	for _, entity := range data.Entities.TypeList {
		if entity.Document, _ = dir.Query("type", entity.ID).(Document); entity.Document != nil {
			entity.Document.SetRender(renderer)
			if doc, ok := entity.Document.(rbxapidoc.Linkable); ok {
				doc.SetLinks(data.NormalizeDocReference)
			}
		} else {
			entity.Document = dummy
		}
	}
}
